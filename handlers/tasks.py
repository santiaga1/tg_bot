from aiogram import Router, F, html
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineQuery, ReplyKeyboardRemove
from aiogram.enums import ParseMode

from keyboards.simple_row import create_inline_kb
from db import DB_Connect

import prettytable as pt


# Create router object
router = Router()

# Create states class
class TasksEdit(StatesGroup):
    view_tasks_options = State()
    add_task_option = State()
    new_task_option = State()
    del_tasks_options = State()

# Manage tasks
@router.callback_query(F.data == "manage_tasks")
async def manage_tasks(callback: CallbackQuery, state: FSMContext):
    available_actions = [
        ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è üìÖ", "view_tasks"],
        ["–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ üìù", "add_task"],
        ["–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ ‚õî", "del_task"],
        ["–û—Ç–º–µ–Ω–∞ ‚ùå", "cancel"]
    ]
    await callback.message.edit_text(
        text='–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:',
        reply_markup=create_inline_kb(2, available_actions)
    )
    await callback.answer()

# View tasks
@router.callback_query(F.data == "view_tasks")
async def view_tasks(callback: CallbackQuery, state: FSMContext):
    available_actions = [
        ["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏ ‚è∞", "manage_tasks"],
        ["–û—Ç–º–µ–Ω–∞ ‚ùå", "cancel"]
    ]
    await state.set_state(TasksEdit.view_tasks_options)
    db = DB_Connect()
    tasks_list = db.view_tasks()
    table = pt.PrettyTable(['ID', '–°–æ–±—ã—Ç–∏–µ', '–ò–º—è', '–î–∞—Ç–∞'])
    table.align['ID'] = 'l'
    table.align['–°–æ–±—ã—Ç–∏–µ'] = 'r'
    table.align['–ò–º—è'] = 'r'
    table.align['–î–∞—Ç–∞'] = 'r'
    for task in tasks_list:
        table.add_row([task[0], task[1], task[2], task[3]])
    await callback.message.edit_text(
        f"–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π:\r\n<pre>{table}</pre>",
        parse_mode=ParseMode.HTML,
        reply_markup=create_inline_kb(2, available_actions)
    )
    await callback.answer()

# Add task - start
@router.callback_query(F.data == "add_task")
async def add_task(callback: CallbackQuery, state: FSMContext):
    available_actions = [
        ["–û—Ç–º–µ–Ω–∞ ‚ùå","cancel"]
    ]
    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è,\r\n–¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ (—á–∏—Å–ª–æ.–Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞),\r\n–ø—Ä–∏–º–µ—Ä:\r\n<pre>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:–ò–º—è:31.03</pre>",
        parse_mode=ParseMode.HTML,
        reply_markup=create_inline_kb(1, available_actions)
    )
    await state.set_state(TasksEdit.add_task_option)
    await callback.answer()

# Add task - check input
@router.message(TasksEdit.add_task_option, F.text.regexp(r'^.*:.*:.*\..*$'))
async def new_task(message: Message, state: FSMContext):
    await state.update_data(new_task_data=message.text)
    available_actions = [
        ["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ‚úÖ", "confirm_add_task"],
        ["–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ üìù", "add_task"],
        ["–û—Ç–º–µ–Ω–∞ ‚ùå","cancel"]
    ]
    table_data = message.text.split(":")
    table = pt.PrettyTable(['–°–æ–±—ã—Ç–∏–µ', '–ò–º—è', '–î–∞—Ç–∞'])
    table.align['–°–æ–±—ã—Ç–∏–µ'] = 'r'
    table.align['–ò–º—è'] = 'r'
    table.align['–î–∞—Ç–∞'] = 'r'
    table.add_row([table_data[0], table_data[1], table_data[2]])
    await message.answer(
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∏—Ö –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ:\r\n<pre>{table}</pre>",
        parse_mode=ParseMode.HTML,
        reply_markup=create_inline_kb(2, available_actions)
    )
    await state.set_state(TasksEdit.new_task_option)

# Add task - bad input
@router.message(TasksEdit.add_task_option)
async def task_format_incorrectly(message: Message):
    available_actions = [
        ["–û—Ç–º–µ–Ω–∞ ‚ùå","cancel"]
    ]
    await message.answer(
        text="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
        reply_markup=create_inline_kb(1, available_actions)
    )

# Add task - confirm input
@router.callback_query(F.data == "confirm_add_task")
async def new_task_confirm(callback: CallbackQuery, state: FSMContext):
    task_data = await state.get_data()
    new_task_data = task_data['new_task_data'].split(":")
    db = DB_Connect()
    db.add_new_task(new_task_data[0], new_task_data[1], new_task_data[2])
    await callback.message.edit_text(
        text=f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!\r\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ /start",
        reply_markup=None
    )
    # Reset state
    await state.clear()
    await callback.answer()

# Delete tasks - start
@router.callback_query(F.data == "del_task")
async def del_tasks_input(callback: CallbackQuery, state: FSMContext):
    available_actions = [
        ["–û—Ç–º–µ–Ω–∞ ‚ùå","cancel"]
    ]
    db = DB_Connect()
    tasks_list = db.view_tasks()
    table = pt.PrettyTable(['ID', '–°–æ–±—ã—Ç–∏–µ', '–ò–º—è', '–î–∞—Ç–∞'])
    table.align['ID'] = 'l'
    table.align['–°–æ–±—ã—Ç–∏–µ'] = 'r'
    table.align['–ò–º—è'] = 'r'
    table.align['–î–∞—Ç–∞'] = 'r'
    for task in tasks_list:
        table.add_row([task[0], task[1], task[2], task[3]])
    await callback.message.edit_text(
        f"–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ ID –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–æ–±—ã—Ç–∏–π:\r\n<pre>{table}</pre>",
        parse_mode=ParseMode.HTML,
        reply_markup=create_inline_kb(2, available_actions)
    )
    await state.set_state(TasksEdit.del_tasks_options)
    await callback.answer()

# Delete tasks - check input and delete
@router.message(TasksEdit.del_tasks_options, F.text.regexp(r'^\d{1,}$'))
async def del_task(message: Message, state: FSMContext):
    await state.update_data(del_task_data=message.text)
    available_actions = [
        ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è üìÖ","view_tasks"],
        ["–û—Ç–º–µ–Ω–∞ ‚ùå","cancel"]
    ]
    del_id = message.text
    db = DB_Connect()
    db.del_task(del_id)
    await message.answer(
        text="–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã!",
        reply_markup=create_inline_kb(2, available_actions)
    )
    # Reset state
    await state.clear()

# Delete tasks - bad input
@router.message(TasksEdit.del_tasks_options)
async def del_task_format_incorrectly(message: Message):
    available_actions = [
        ["–û—Ç–º–µ–Ω–∞ ‚ùå","cancel"]
    ]
    await message.answer(
        text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
        reply_markup=create_inline_kb(1, available_actions)
    )
