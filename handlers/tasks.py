from aiogram import Router, F, html
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.enums import ParseMode

from keyboards.simple_row import make_row_keyboard
from db import DB_Connect

import prettytable as pt


# Create router object
router = Router()

# Actions text
available_actions = ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è üìÖ", "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ üìù", "–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ ‚õî", "–û—Ç–º–µ–Ω–∞ ‚ùå"]
back_actions = ["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏ ‚è∞", "–û—Ç–º–µ–Ω–∞ ‚ùå"]
add_actions = ["–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ üìù", "–û—Ç–º–µ–Ω–∞ ‚ùå"]
new_task_actions = ["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ‚úÖ", "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ üìù", "–û—Ç–º–µ–Ω–∞ ‚ùå"]
cancel_action = ["–û—Ç–º–µ–Ω–∞ ‚ùå"]
del_actions = ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è üìÖ", "–û—Ç–º–µ–Ω–∞ ‚ùå"]

# Create states class
class TasksEdit(StatesGroup):
    choosing_tasks_options = State()
    view_tasks_options = State()
    add_task_option = State()
    new_task_option = State()
    del_tasks_options = State()

# Tasks control
@router.message(F.text.lower() == "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏ ‚è∞")
async def cmd_tasks(message: Message, state: FSMContext):
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=make_row_keyboard(available_actions)
    )

# View tasks
@router.message(F.text.lower() == "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è üìÖ")
async def cmd_tasks(message: Message, state: FSMContext):
    db = DB_Connect()
    tasks_list = db.view_tasks()
    table = pt.PrettyTable(['ID', '–°–æ–±—ã—Ç–∏–µ', '–ò–º—è', '–î–∞—Ç–∞'])
    table.align['ID'] = 'l'
    table.align['–°–æ–±—ã—Ç–∏–µ'] = 'r'
    table.align['–ò–º—è'] = 'r'
    table.align['–î–∞—Ç–∞'] = 'r'
    for task in tasks_list:
        table.add_row([task[0], task[1], task[2], task[3]])
    await message.answer(
        f"–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π:\r\n<pre>{table}</pre>",
        parse_mode=ParseMode.HTML,
        reply_markup=make_row_keyboard(back_actions)
    )
    await state.set_state(TasksEdit.view_tasks_options)

# Add task - start
@router.message(F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ üìù")
@router.message(F.text.lower() == "–∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ üìù")
async def add_task(message: Message, state: FSMContext):
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è, –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (—á–∏—Å–ª–æ.–Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞), –ø—Ä–∏–º–µ—Ä:\r\n –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:–ò–º—è:31.03",
        reply_markup=make_row_keyboard(add_actions)
    )
    await state.set_state(TasksEdit.add_task_option)

# Add task - check input
@router.message(TasksEdit.add_task_option, F.text.regexp(r'^.*:.*:.*\..*$'))
async def new_task(message: Message, state: FSMContext):
    await state.update_data(new_task_data=message.text)
    table_data = message.text.split(":")
    table = pt.PrettyTable(['–°–æ–±—ã—Ç–∏–µ', '–ò–º—è', '–î–∞—Ç–∞'])
    table.align['–°–æ–±—ã—Ç–∏–µ'] = 'r'
    table.align['–ò–º—è'] = 'r'
    table.align['–î–∞—Ç–∞'] = 'r'
    table.add_row([table_data[0], table_data[1], table_data[2]])
    await message.answer(
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∏—Ö –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ:\r\n<pre>{table}</pre>",
        parse_mode=ParseMode.HTML,
        reply_markup=make_row_keyboard(new_task_actions)
    )
    await state.set_state(TasksEdit.new_task_option)

# Add task - bad input
@router.message(TasksEdit.add_task_option)
async def task_format_incorrectly(message: Message):
    await message.answer(
        text="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
        reply_markup=make_row_keyboard(cancel_action)
    )
# Add task - confirm input
@router.message(TasksEdit.new_task_option, F.text.lower() == "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ‚úÖ")
async def new_task_confirm(message: Message, state: FSMContext):
    task_data = await state.get_data()
    new_task_data = task_data['new_task_data'].split(":")
    db = DB_Connect()
    db.add_new_task(new_task_data[0], new_task_data[1], new_task_data[2])
    await message.answer(
        text=f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )
    # Reset state
    await state.clear()

# Delete tasks - start
@router.message(F.text.lower() == "—É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ ‚õî")
async def del_tasks_input(message: Message, state: FSMContext):
    db = DB_Connect()
    tasks_list = db.view_tasks()
    table = pt.PrettyTable(['ID', '–°–æ–±—ã—Ç–∏–µ', '–ò–º—è', '–î–∞—Ç–∞'])
    table.align['ID'] = 'l'
    table.align['–°–æ–±—ã—Ç–∏–µ'] = 'r'
    table.align['–ò–º—è'] = 'r'
    table.align['–î–∞—Ç–∞'] = 'r'
    for task in tasks_list:
        table.add_row([task[0], task[1], task[2], task[3]])
    await message.answer(
        f"–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ ID –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–æ–±—ã—Ç–∏–π:\r\n<pre>{table}</pre>",
        parse_mode=ParseMode.HTML,
        reply_markup=make_row_keyboard(cancel_action)
    )
    await state.set_state(TasksEdit.del_tasks_options)

# Delete tasks - check input and delete
@router.message(TasksEdit.del_tasks_options, F.text.regexp(r'^\d{1,}$'))
async def del_task(message: Message, state: FSMContext):
    await state.update_data(del_task_data=message.text)
    del_id = message.text
    db = DB_Connect()
    db.del_task(del_id)
    await message.answer(
        text="–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã!",
        reply_markup=make_row_keyboard(del_actions)
    )
    # Reset state
    await state.clear()

# Delete tasks - bad input
@router.message(TasksEdit.del_tasks_options)
async def del_task_format_incorrectly(message: Message):
    await message.answer(
        text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
        reply_markup=make_row_keyboard(cancel_action)
    )
